
STM_32_F407_OTONOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005494  08005494  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800549c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d788  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b16  00000000  00000000  0002d7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  0002ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000168d  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbb0  00000000  00000000  00032125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6fc2  00000000  00000000  0003fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106c97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000348c  00000000  00000000  00106ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800545c 	.word	0x0800545c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800545c 	.word	0x0800545c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <delay>:
static void MX_TIM2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t us)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <delay+0x30>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000d1a:	bf00      	nop
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <delay+0x30>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3f9      	bcc.n	8000d1c <delay+0x14>
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000070 	.word	0x20000070

08000d3c <Sensor_Read>:

float Sensor_Read()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	uint32_t time =0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <Sensor_Read+0x74>)
 8000d4c:	f001 ff96 	bl	8002c7c <HAL_GPIO_WritePin>
	delay(2);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff ffd9 	bl	8000d08 <delay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <Sensor_Read+0x74>)
 8000d5c:	f001 ff8e 	bl	8002c7c <HAL_GPIO_WritePin>
    delay(10);
 8000d60:	200a      	movs	r0, #10
 8000d62:	f7ff ffd1 	bl	8000d08 <delay>
    HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <Sensor_Read+0x74>)
 8000d6c:	f001 ff86 	bl	8002c7c <HAL_GPIO_WritePin>


    while(!HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin));
 8000d70:	bf00      	nop
 8000d72:	2110      	movs	r1, #16
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <Sensor_Read+0x74>)
 8000d76:	f001 ff69 	bl	8002c4c <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f8      	beq.n	8000d72 <Sensor_Read+0x36>
    while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))
 8000d80:	e005      	b.n	8000d8e <Sensor_Read+0x52>
    {
    	time++;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
    	delay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ffbd 	bl	8000d08 <delay>
    while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <Sensor_Read+0x74>)
 8000d92:	f001 ff5b 	bl	8002c4c <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f2      	bne.n	8000d82 <Sensor_Read+0x46>
    }
	return time;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000da6:	eeb0 0a67 	vmov.f32	s0, s15
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020000 	.word	0x40020000
 8000db4:	00000000 	.word	0x00000000

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f001 fb70 	bl	80024a0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 ff60 	bl	8001c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f001 f930 	bl	8002028 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000dc8:	f001 f88c 	bl	8001ee4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000dcc:	f001 f814 	bl	8001df8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dd0:	f001 f900 	bl	8001fd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dd4:	f000 ffc0 	bl	8001d58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	48cf      	ldr	r0, [pc, #828]	; (8001118 <main+0x360>)
 8000ddc:	f002 fcd2 	bl	8003784 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000de0:	48ce      	ldr	r0, [pc, #824]	; (800111c <main+0x364>)
 8000de2:	f002 fc0d 	bl	8003600 <HAL_TIM_Base_Start>
  {




	      sensor_time = Sensor_Read();
 8000de6:	f7ff ffa9 	bl	8000d3c <Sensor_Read>
 8000dea:	eef0 7a40 	vmov.f32	s15, s0
 8000dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df2:	ee17 2a90 	vmov	r2, s15
 8000df6:	4bca      	ldr	r3, [pc, #808]	; (8001120 <main+0x368>)
 8000df8:	601a      	str	r2, [r3, #0]
          distance = sensor_time * .034/2;
 8000dfa:	4bc9      	ldr	r3, [pc, #804]	; (8001120 <main+0x368>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb24 	bl	800044c <__aeabi_ui2d>
 8000e04:	a3c2      	add	r3, pc, #776	; (adr r3, 8001110 <main+0x358>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fb99 	bl	8000540 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1e:	f7ff fcb9 	bl	8000794 <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fd9b 	bl	8000964 <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4abc      	ldr	r2, [pc, #752]	; (8001124 <main+0x36c>)
 8000e32:	6013      	str	r3, [r2, #0]


          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	48bb      	ldr	r0, [pc, #748]	; (8001128 <main+0x370>)
 8000e3a:	f001 ff1f 	bl	8002c7c <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2120      	movs	r1, #32
 8000e42:	48b9      	ldr	r0, [pc, #740]	; (8001128 <main+0x370>)
 8000e44:	f001 ff1a 	bl	8002c7c <HAL_GPIO_WritePin>



	      htim4.Instance->CCR1 = 10;
 8000e48:	4bb3      	ldr	r3, [pc, #716]	; (8001118 <main+0x360>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	220a      	movs	r2, #10
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34


	  	  if(distance < 8)
 8000e50:	4bb4      	ldr	r3, [pc, #720]	; (8001124 <main+0x36c>)
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e62:	d52d      	bpl.n	8000ec0 <main+0x108>
	  	  {
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	48af      	ldr	r0, [pc, #700]	; (8001128 <main+0x370>)
 8000e6a:	f001 ff07 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	48ad      	ldr	r0, [pc, #692]	; (8001128 <main+0x370>)
 8000e74:	f001 ff02 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	48aa      	ldr	r0, [pc, #680]	; (8001128 <main+0x370>)
 8000e7e:	f001 fefd 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	48a8      	ldr	r0, [pc, #672]	; (8001128 <main+0x370>)
 8000e88:	f001 fef8 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_Delay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f001 fb79 	bl	8002584 <HAL_Delay>

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	48a5      	ldr	r0, [pc, #660]	; (800112c <main+0x374>)
 8000e98:	f001 fef0 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	48a2      	ldr	r0, [pc, #648]	; (800112c <main+0x374>)
 8000ea2:	f001 feeb 	bl	8002c7c <HAL_GPIO_WritePin>


	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	489f      	ldr	r0, [pc, #636]	; (8001128 <main+0x370>)
 8000eac:	f001 fee6 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_Delay(10);
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f001 fb67 	bl	8002584 <HAL_Delay>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2110      	movs	r1, #16
 8000eba:	489b      	ldr	r0, [pc, #620]	; (8001128 <main+0x370>)
 8000ebc:	f001 fede 	bl	8002c7c <HAL_GPIO_WritePin>



	  	  }

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4899      	ldr	r0, [pc, #612]	; (800112c <main+0x374>)
 8000ec6:	f001 fed9 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2140      	movs	r1, #64	; 0x40
 8000ece:	4897      	ldr	r0, [pc, #604]	; (800112c <main+0x374>)
 8000ed0:	f001 fed4 	bl	8002c7c <HAL_GPIO_WritePin>


		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4893      	ldr	r0, [pc, #588]	; (8001128 <main+0x370>)
 8000eda:	f001 fecf 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4891      	ldr	r0, [pc, #580]	; (8001128 <main+0x370>)
 8000ee4:	f001 feca 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2120      	movs	r1, #32
 8000eec:	488e      	ldr	r0, [pc, #568]	; (8001128 <main+0x370>)
 8000eee:	f001 fec5 	bl	8002c7c <HAL_GPIO_WritePin>



	  	  htim4.Instance->CCR1 = 20;
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <main+0x360>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2214      	movs	r2, #20
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34

	  	  sensor_time = Sensor_Read();
 8000efa:	f7ff ff1f 	bl	8000d3c <Sensor_Read>
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f06:	ee17 2a90 	vmov	r2, s15
 8000f0a:	4b85      	ldr	r3, [pc, #532]	; (8001120 <main+0x368>)
 8000f0c:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8000f0e:	4b84      	ldr	r3, [pc, #528]	; (8001120 <main+0x368>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fa9a 	bl	800044c <__aeabi_ui2d>
 8000f18:	a37d      	add	r3, pc, #500	; (adr r3, 8001110 <main+0x358>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb0f 	bl	8000540 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	f7ff fc2f 	bl	8000794 <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fd11 	bl	8000964 <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a77      	ldr	r2, [pc, #476]	; (8001124 <main+0x36c>)
 8000f46:	6013      	str	r3, [r2, #0]

//	      htim4.Instance->CCR1 = 10;
	 	  HAL_Delay(50);
 8000f48:	2032      	movs	r0, #50	; 0x32
 8000f4a:	f001 fb1b 	bl	8002584 <HAL_Delay>
		  if(distance < 8)
 8000f4e:	4b75      	ldr	r3, [pc, #468]	; (8001124 <main+0x36c>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d522      	bpl.n	8000fa8 <main+0x1f0>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	4870      	ldr	r0, [pc, #448]	; (8001128 <main+0x370>)
 8000f68:	f001 fe88 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	486d      	ldr	r0, [pc, #436]	; (8001128 <main+0x370>)
 8000f72:	f001 fe83 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	486b      	ldr	r0, [pc, #428]	; (8001128 <main+0x370>)
 8000f7c:	f001 fe7e 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4868      	ldr	r0, [pc, #416]	; (8001128 <main+0x370>)
 8000f86:	f001 fe79 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4866      	ldr	r0, [pc, #408]	; (8001128 <main+0x370>)
 8000f90:	f001 fe74 	bl	8002c7c <HAL_GPIO_WritePin>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4864      	ldr	r0, [pc, #400]	; (800112c <main+0x374>)
 8000f9a:	f001 fe6f 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4862      	ldr	r0, [pc, #392]	; (800112c <main+0x374>)
 8000fa4:	f001 fe6a 	bl	8002c7c <HAL_GPIO_WritePin>



		  	  }

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2110      	movs	r1, #16
 8000fac:	485e      	ldr	r0, [pc, #376]	; (8001128 <main+0x370>)
 8000fae:	f001 fe65 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	485c      	ldr	r0, [pc, #368]	; (8001128 <main+0x370>)
 8000fb8:	f001 fe60 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4859      	ldr	r0, [pc, #356]	; (8001128 <main+0x370>)
 8000fc2:	f001 fe5b 	bl	8002c7c <HAL_GPIO_WritePin>

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	4858      	ldr	r0, [pc, #352]	; (800112c <main+0x374>)
 8000fcc:	f001 fe56 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4855      	ldr	r0, [pc, #340]	; (800112c <main+0x374>)
 8000fd6:	f001 fe51 	bl	8002c7c <HAL_GPIO_WritePin>



	  	  htim4.Instance->CCR1 = 30;
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <main+0x360>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	221e      	movs	r2, #30
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34

	  	  sensor_time = Sensor_Read();
 8000fe2:	f7ff feab 	bl	8000d3c <Sensor_Read>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <main+0x368>)
 8000ff4:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <main+0x368>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa26 	bl	800044c <__aeabi_ui2d>
 8001000:	a343      	add	r3, pc, #268	; (adr r3, 8001110 <main+0x358>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fa9b 	bl	8000540 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101a:	f7ff fbbb 	bl	8000794 <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fc9d 	bl	8000964 <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <main+0x36c>)
 800102e:	6013      	str	r3, [r2, #0]

	 	  htim4.Instance->CCR1 = 30;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <main+0x360>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	221e      	movs	r2, #30
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	; 0x32
 800103a:	f001 faa3 	bl	8002584 <HAL_Delay>

		  if(distance < 8)
 800103e:	4b39      	ldr	r3, [pc, #228]	; (8001124 <main+0x36c>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d522      	bpl.n	8001098 <main+0x2e0>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4834      	ldr	r0, [pc, #208]	; (8001128 <main+0x370>)
 8001058:	f001 fe10 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4831      	ldr	r0, [pc, #196]	; (8001128 <main+0x370>)
 8001062:	f001 fe0b 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	482f      	ldr	r0, [pc, #188]	; (8001128 <main+0x370>)
 800106c:	f001 fe06 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	482c      	ldr	r0, [pc, #176]	; (8001128 <main+0x370>)
 8001076:	f001 fe01 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2110      	movs	r1, #16
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <main+0x370>)
 8001080:	f001 fdfc 	bl	8002c7c <HAL_GPIO_WritePin>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <main+0x374>)
 800108a:	f001 fdf7 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2140      	movs	r1, #64	; 0x40
 8001092:	4826      	ldr	r0, [pc, #152]	; (800112c <main+0x374>)
 8001094:	f001 fdf2 	bl	8002c7c <HAL_GPIO_WritePin>



		  	  }
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2110      	movs	r1, #16
 800109c:	4822      	ldr	r0, [pc, #136]	; (8001128 <main+0x370>)
 800109e:	f001 fded 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <main+0x370>)
 80010a8:	f001 fde8 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	481d      	ldr	r0, [pc, #116]	; (8001128 <main+0x370>)
 80010b2:	f001 fde3 	bl	8002c7c <HAL_GPIO_WritePin>

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <main+0x374>)
 80010bc:	f001 fdde 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <main+0x374>)
 80010c6:	f001 fdd9 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  htim4.Instance->CCR1 = 30;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <main+0x360>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	221e      	movs	r2, #30
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34

	  	  sensor_time = Sensor_Read();
 80010d2:	f7ff fe33 	bl	8000d3c <Sensor_Read>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010de:	ee17 2a90 	vmov	r2, s15
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <main+0x368>)
 80010e4:	601a      	str	r2, [r3, #0]
	  	  distance = sensor_time * .034/2;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <main+0x368>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9ae 	bl	800044c <__aeabi_ui2d>
 80010f0:	a307      	add	r3, pc, #28	; (adr r3, 8001110 <main+0x358>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa23 	bl	8000540 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110a:	e011      	b.n	8001130 <main+0x378>
 800110c:	f3af 8000 	nop.w
 8001110:	b020c49c 	.word	0xb020c49c
 8001114:	3fa16872 	.word	0x3fa16872
 8001118:	200000b8 	.word	0x200000b8
 800111c:	20000070 	.word	0x20000070
 8001120:	20000144 	.word	0x20000144
 8001124:	20000148 	.word	0x20000148
 8001128:	40020400 	.word	0x40020400
 800112c:	40020000 	.word	0x40020000
 8001130:	f7ff fb30 	bl	8000794 <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fc12 	bl	8000964 <__aeabi_d2f>
 8001140:	4603      	mov	r3, r0
 8001142:	4acd      	ldr	r2, [pc, #820]	; (8001478 <main+0x6c0>)
 8001144:	6013      	str	r3, [r2, #0]

	  	  htim4.Instance->CCR1 = 30;
 8001146:	4bcd      	ldr	r3, [pc, #820]	; (800147c <main+0x6c4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	221e      	movs	r2, #30
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
	      HAL_Delay(50);
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f001 fa18 	bl	8002584 <HAL_Delay>

		  if(distance < 8)
 8001154:	4bc8      	ldr	r3, [pc, #800]	; (8001478 <main+0x6c0>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d525      	bpl.n	80011b4 <main+0x3fc>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	48c4      	ldr	r0, [pc, #784]	; (8001480 <main+0x6c8>)
 800116e:	f001 fd85 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	48c2      	ldr	r0, [pc, #776]	; (8001480 <main+0x6c8>)
 8001178:	f001 fd80 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2110      	movs	r1, #16
 8001180:	48bf      	ldr	r0, [pc, #764]	; (8001480 <main+0x6c8>)
 8001182:	f001 fd7b 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	48bd      	ldr	r0, [pc, #756]	; (8001480 <main+0x6c8>)
 800118c:	f001 fd76 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	48bb      	ldr	r0, [pc, #748]	; (8001484 <main+0x6cc>)
 8001196:	f001 fd71 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	48b9      	ldr	r0, [pc, #740]	; (8001484 <main+0x6cc>)
 80011a0:	f001 fd6c 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	48b5      	ldr	r0, [pc, #724]	; (8001480 <main+0x6c8>)
 80011aa:	f001 fd67 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(10);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f001 f9e8 	bl	8002584 <HAL_Delay>


		  	  }

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	48b2      	ldr	r0, [pc, #712]	; (8001484 <main+0x6cc>)
 80011ba:	f001 fd5f 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	48b0      	ldr	r0, [pc, #704]	; (8001484 <main+0x6cc>)
 80011c4:	f001 fd5a 	bl	8002c7c <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2110      	movs	r1, #16
 80011cc:	48ac      	ldr	r0, [pc, #688]	; (8001480 <main+0x6c8>)
 80011ce:	f001 fd55 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	48aa      	ldr	r0, [pc, #680]	; (8001480 <main+0x6c8>)
 80011d8:	f001 fd50 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	48a7      	ldr	r0, [pc, #668]	; (8001480 <main+0x6c8>)
 80011e2:	f001 fd4b 	bl	8002c7c <HAL_GPIO_WritePin>


	  	  htim4.Instance->CCR1 = 40;
 80011e6:	4ba5      	ldr	r3, [pc, #660]	; (800147c <main+0x6c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
	  	  sensor_time = Sensor_Read();
 80011ee:	f7ff fda5 	bl	8000d3c <Sensor_Read>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
 80011f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fa:	ee17 2a90 	vmov	r2, s15
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <main+0x6d0>)
 8001200:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8001202:	4ba1      	ldr	r3, [pc, #644]	; (8001488 <main+0x6d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f920 	bl	800044c <__aeabi_ui2d>
 800120c:	a398      	add	r3, pc, #608	; (adr r3, 8001470 <main+0x6b8>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff f995 	bl	8000540 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001226:	f7ff fab5 	bl	8000794 <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fb97 	bl	8000964 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4a8f      	ldr	r2, [pc, #572]	; (8001478 <main+0x6c0>)
 800123a:	6013      	str	r3, [r2, #0]

	 	  htim4.Instance->CCR1 = 40;
 800123c:	4b8f      	ldr	r3, [pc, #572]	; (800147c <main+0x6c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2228      	movs	r2, #40	; 0x28
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f001 f99d 	bl	8002584 <HAL_Delay>

	 	 if(distance < 8)
 800124a:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <main+0x6c0>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d52a      	bpl.n	80012b4 <main+0x4fc>
	 		  	  {
	 		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	4887      	ldr	r0, [pc, #540]	; (8001480 <main+0x6c8>)
 8001264:	f001 fd0a 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	4884      	ldr	r0, [pc, #528]	; (8001480 <main+0x6c8>)
 800126e:	f001 fd05 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	4882      	ldr	r0, [pc, #520]	; (8001480 <main+0x6c8>)
 8001278:	f001 fd00 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2120      	movs	r1, #32
 8001280:	487f      	ldr	r0, [pc, #508]	; (8001480 <main+0x6c8>)
 8001282:	f001 fcfb 	bl	8002c7c <HAL_GPIO_WritePin>


			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	487e      	ldr	r0, [pc, #504]	; (8001484 <main+0x6cc>)
 800128c:	f001 fcf6 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	487b      	ldr	r0, [pc, #492]	; (8001484 <main+0x6cc>)
 8001296:	f001 fcf1 	bl	8002c7c <HAL_GPIO_WritePin>


	 		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	4878      	ldr	r0, [pc, #480]	; (8001480 <main+0x6c8>)
 80012a0:	f001 fcec 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  	    HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f001 f96d 	bl	8002584 <HAL_Delay>
	 		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	4874      	ldr	r0, [pc, #464]	; (8001480 <main+0x6c8>)
 80012b0:	f001 fce4 	bl	8002c7c <HAL_GPIO_WritePin>



	 		  	  }

		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
 80012b8:	4871      	ldr	r0, [pc, #452]	; (8001480 <main+0x6c8>)
 80012ba:	f001 fcdf 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	486f      	ldr	r0, [pc, #444]	; (8001480 <main+0x6c8>)
 80012c4:	f001 fcda 	bl	8002c7c <HAL_GPIO_WritePin>
	 		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2120      	movs	r1, #32
 80012cc:	486c      	ldr	r0, [pc, #432]	; (8001480 <main+0x6c8>)
 80012ce:	f001 fcd5 	bl	8002c7c <HAL_GPIO_WritePin>

			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	486b      	ldr	r0, [pc, #428]	; (8001484 <main+0x6cc>)
 80012d8:	f001 fcd0 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	4868      	ldr	r0, [pc, #416]	; (8001484 <main+0x6cc>)
 80012e2:	f001 fccb 	bl	8002c7c <HAL_GPIO_WritePin>


		  htim4.Instance->CCR1 = 40;
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <main+0x6c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2228      	movs	r2, #40	; 0x28
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
	  	  sensor_time = Sensor_Read();
 80012ee:	f7ff fd25 	bl	8000d3c <Sensor_Read>
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
 80012f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fa:	ee17 2a90 	vmov	r2, s15
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <main+0x6d0>)
 8001300:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8001302:	4b61      	ldr	r3, [pc, #388]	; (8001488 <main+0x6d0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8a0 	bl	800044c <__aeabi_ui2d>
 800130c:	a358      	add	r3, pc, #352	; (adr r3, 8001470 <main+0x6b8>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f915 	bl	8000540 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001326:	f7ff fa35 	bl	8000794 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fb17 	bl	8000964 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <main+0x6c0>)
 800133a:	6013      	str	r3, [r2, #0]

	      if(distance < 8)
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <main+0x6c0>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d52a      	bpl.n	80013a6 <main+0x5ee>
	     	  	  {
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	484a      	ldr	r0, [pc, #296]	; (8001480 <main+0x6c8>)
 8001356:	f001 fc91 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4848      	ldr	r0, [pc, #288]	; (8001480 <main+0x6c8>)
 8001360:	f001 fc8c 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2110      	movs	r1, #16
 8001368:	4845      	ldr	r0, [pc, #276]	; (8001480 <main+0x6c8>)
 800136a:	f001 fc87 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	4843      	ldr	r0, [pc, #268]	; (8001480 <main+0x6c8>)
 8001374:	f001 fc82 	bl	8002c7c <HAL_GPIO_WritePin>


			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	4841      	ldr	r0, [pc, #260]	; (8001484 <main+0x6cc>)
 800137e:	f001 fc7d 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001382:	2201      	movs	r2, #1
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	483f      	ldr	r0, [pc, #252]	; (8001484 <main+0x6cc>)
 8001388:	f001 fc78 	bl	8002c7c <HAL_GPIO_WritePin>


	    	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2110      	movs	r1, #16
 8001390:	483b      	ldr	r0, [pc, #236]	; (8001480 <main+0x6c8>)
 8001392:	f001 fc73 	bl	8002c7c <HAL_GPIO_WritePin>
	    	  	    HAL_Delay(100);
 8001396:	2064      	movs	r0, #100	; 0x64
 8001398:	f001 f8f4 	bl	8002584 <HAL_Delay>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	4837      	ldr	r0, [pc, #220]	; (8001480 <main+0x6c8>)
 80013a2:	f001 fc6b 	bl	8002c7c <HAL_GPIO_WritePin>



	     	  	  }

	  	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	4836      	ldr	r0, [pc, #216]	; (8001484 <main+0x6cc>)
 80013ac:	f001 fc66 	bl	8002c7c <HAL_GPIO_WritePin>
	  	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	4833      	ldr	r0, [pc, #204]	; (8001484 <main+0x6cc>)
 80013b6:	f001 fc61 	bl	8002c7c <HAL_GPIO_WritePin>


		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2110      	movs	r1, #16
 80013be:	4830      	ldr	r0, [pc, #192]	; (8001480 <main+0x6c8>)
 80013c0:	f001 fc5c 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <main+0x6c8>)
 80013ca:	f001 fc57 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2120      	movs	r1, #32
 80013d2:	482b      	ldr	r0, [pc, #172]	; (8001480 <main+0x6c8>)
 80013d4:	f001 fc52 	bl	8002c7c <HAL_GPIO_WritePin>

	 	  htim4.Instance->CCR1 = 50;
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <main+0x6c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2232      	movs	r2, #50	; 0x32
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 f8cf 	bl	8002584 <HAL_Delay>

		  if(distance < 8)
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <main+0x6c0>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d523      	bpl.n	8001442 <main+0x68a>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <main+0x6c8>)
 8001400:	f001 fc3c 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <main+0x6c8>)
 800140a:	f001 fc37 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 800140e:	2064      	movs	r0, #100	; 0x64
 8001410:	f001 f8b8 	bl	8002584 <HAL_Delay>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <main+0x6cc>)
 800141a:	f001 fc2f 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <main+0x6cc>)
 8001424:	f001 fc2a 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2110      	movs	r1, #16
 800142c:	4814      	ldr	r0, [pc, #80]	; (8001480 <main+0x6c8>)
 800142e:	f001 fc25 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f001 f8a6 	bl	8002584 <HAL_Delay>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2110      	movs	r1, #16
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <main+0x6c8>)
 800143e:	f001 fc1d 	bl	8002c7c <HAL_GPIO_WritePin>


		  	  }
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <main+0x6cc>)
 8001448:	f001 fc18 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <main+0x6cc>)
 8001452:	f001 fc13 	bl	8002c7c <HAL_GPIO_WritePin>


	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <main+0x6c8>)
 800145c:	f001 fc0e 	bl	8002c7c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2110      	movs	r1, #16
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <main+0x6c8>)
 8001466:	f001 fc09 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	e00d      	b.n	800148c <main+0x6d4>
 8001470:	b020c49c 	.word	0xb020c49c
 8001474:	3fa16872 	.word	0x3fa16872
 8001478:	20000148 	.word	0x20000148
 800147c:	200000b8 	.word	0x200000b8
 8001480:	40020400 	.word	0x40020400
 8001484:	40020000 	.word	0x40020000
 8001488:	20000144 	.word	0x20000144
 800148c:	48cc      	ldr	r0, [pc, #816]	; (80017c0 <main+0xa08>)
 800148e:	f001 fbf5 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  htim4.Instance->CCR1 = 60;
 8001492:	4bcc      	ldr	r3, [pc, #816]	; (80017c4 <main+0xa0c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	223c      	movs	r2, #60	; 0x3c
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
	  	  sensor_time = Sensor_Read();
 800149a:	f7ff fc4f 	bl	8000d3c <Sensor_Read>
 800149e:	eef0 7a40 	vmov.f32	s15, s0
 80014a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a6:	ee17 2a90 	vmov	r2, s15
 80014aa:	4bc7      	ldr	r3, [pc, #796]	; (80017c8 <main+0xa10>)
 80014ac:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 80014ae:	4bc6      	ldr	r3, [pc, #792]	; (80017c8 <main+0xa10>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffca 	bl	800044c <__aeabi_ui2d>
 80014b8:	a3bf      	add	r3, pc, #764	; (adr r3, 80017b8 <main+0xa00>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f83f 	bl	8000540 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d2:	f7ff f95f 	bl	8000794 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fa41 	bl	8000964 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4ab9      	ldr	r2, [pc, #740]	; (80017cc <main+0xa14>)
 80014e6:	6013      	str	r3, [r2, #0]

	 	  htim4.Instance->CCR1 = 60;
 80014e8:	4bb6      	ldr	r3, [pc, #728]	; (80017c4 <main+0xa0c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	223c      	movs	r2, #60	; 0x3c
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f001 f847 	bl	8002584 <HAL_Delay>
		  if(distance < 8)
 80014f6:	4bb5      	ldr	r3, [pc, #724]	; (80017cc <main+0xa14>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d523      	bpl.n	8001552 <main+0x79a>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	48ac      	ldr	r0, [pc, #688]	; (80017c0 <main+0xa08>)
 8001510:	f001 fbb4 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2120      	movs	r1, #32
 8001518:	48a9      	ldr	r0, [pc, #676]	; (80017c0 <main+0xa08>)
 800151a:	f001 fbaf 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f001 f830 	bl	8002584 <HAL_Delay>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	48a9      	ldr	r0, [pc, #676]	; (80017d0 <main+0xa18>)
 800152a:	f001 fba7 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	48a7      	ldr	r0, [pc, #668]	; (80017d0 <main+0xa18>)
 8001534:	f001 fba2 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	48a0      	ldr	r0, [pc, #640]	; (80017c0 <main+0xa08>)
 800153e:	f001 fb9d 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001542:	2064      	movs	r0, #100	; 0x64
 8001544:	f001 f81e 	bl	8002584 <HAL_Delay>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	489c      	ldr	r0, [pc, #624]	; (80017c0 <main+0xa08>)
 800154e:	f001 fb95 	bl	8002c7c <HAL_GPIO_WritePin>


		  	  }
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	489e      	ldr	r0, [pc, #632]	; (80017d0 <main+0xa18>)
 8001558:	f001 fb90 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2140      	movs	r1, #64	; 0x40
 8001560:	489b      	ldr	r0, [pc, #620]	; (80017d0 <main+0xa18>)
 8001562:	f001 fb8b 	bl	8002c7c <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4895      	ldr	r0, [pc, #596]	; (80017c0 <main+0xa08>)
 800156c:	f001 fb86 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4892      	ldr	r0, [pc, #584]	; (80017c0 <main+0xa08>)
 8001576:	f001 fb81 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	4890      	ldr	r0, [pc, #576]	; (80017c0 <main+0xa08>)
 8001580:	f001 fb7c 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  htim4.Instance->CCR1 = 70;
 8001584:	4b8f      	ldr	r3, [pc, #572]	; (80017c4 <main+0xa0c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2246      	movs	r2, #70	; 0x46
 800158a:	635a      	str	r2, [r3, #52]	; 0x34

	  	  sensor_time = Sensor_Read();
 800158c:	f7ff fbd6 	bl	8000d3c <Sensor_Read>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <main+0xa10>)
 800159e:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 80015a0:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <main+0xa10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff51 	bl	800044c <__aeabi_ui2d>
 80015aa:	a383      	add	r3, pc, #524	; (adr r3, 80017b8 <main+0xa00>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe ffc6 	bl	8000540 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c4:	f7ff f8e6 	bl	8000794 <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff f9c8 	bl	8000964 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a7d      	ldr	r2, [pc, #500]	; (80017cc <main+0xa14>)
 80015d8:	6013      	str	r3, [r2, #0]

	 	  htim4.Instance->CCR1 = 70;
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <main+0xa0c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2246      	movs	r2, #70	; 0x46
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f000 ffce 	bl	8002584 <HAL_Delay>
		  if(distance < 8)
 80015e8:	4b78      	ldr	r3, [pc, #480]	; (80017cc <main+0xa14>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d52d      	bpl.n	8001658 <main+0x8a0>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	486f      	ldr	r0, [pc, #444]	; (80017c0 <main+0xa08>)
 8001602:	f001 fb3b 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	486d      	ldr	r0, [pc, #436]	; (80017c0 <main+0xa08>)
 800160c:	f001 fb36 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2110      	movs	r1, #16
 8001614:	486a      	ldr	r0, [pc, #424]	; (80017c0 <main+0xa08>)
 8001616:	f001 fb31 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2120      	movs	r1, #32
 800161e:	4868      	ldr	r0, [pc, #416]	; (80017c0 <main+0xa08>)
 8001620:	f001 fb2c 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001624:	2064      	movs	r0, #100	; 0x64
 8001626:	f000 ffad 	bl	8002584 <HAL_Delay>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2140      	movs	r1, #64	; 0x40
 800162e:	4868      	ldr	r0, [pc, #416]	; (80017d0 <main+0xa18>)
 8001630:	f001 fb24 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	4865      	ldr	r0, [pc, #404]	; (80017d0 <main+0xa18>)
 800163a:	f001 fb1f 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2110      	movs	r1, #16
 8001642:	485f      	ldr	r0, [pc, #380]	; (80017c0 <main+0xa08>)
 8001644:	f001 fb1a 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	f000 ff9b 	bl	8002584 <HAL_Delay>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	485b      	ldr	r0, [pc, #364]	; (80017c0 <main+0xa08>)
 8001654:	f001 fb12 	bl	8002c7c <HAL_GPIO_WritePin>


		  	  }

	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	485c      	ldr	r0, [pc, #368]	; (80017d0 <main+0xa18>)
 800165e:	f001 fb0d 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	485a      	ldr	r0, [pc, #360]	; (80017d0 <main+0xa18>)
 8001668:	f001 fb08 	bl	8002c7c <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2110      	movs	r1, #16
 8001670:	4853      	ldr	r0, [pc, #332]	; (80017c0 <main+0xa08>)
 8001672:	f001 fb03 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	4851      	ldr	r0, [pc, #324]	; (80017c0 <main+0xa08>)
 800167c:	f001 fafe 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2120      	movs	r1, #32
 8001684:	484e      	ldr	r0, [pc, #312]	; (80017c0 <main+0xa08>)
 8001686:	f001 faf9 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  htim4.Instance->CCR1 = 70;
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <main+0xa0c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2246      	movs	r2, #70	; 0x46
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
	  	  sensor_time = Sensor_Read();
 8001692:	f7ff fb53 	bl	8000d3c <Sensor_Read>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169e:	ee17 2a90 	vmov	r2, s15
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <main+0xa10>)
 80016a4:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <main+0xa10>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fece 	bl	800044c <__aeabi_ui2d>
 80016b0:	a341      	add	r3, pc, #260	; (adr r3, 80017b8 <main+0xa00>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ff43 	bl	8000540 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ca:	f7ff f863 	bl	8000794 <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f945 	bl	8000964 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <main+0xa14>)
 80016de:	6013      	str	r3, [r2, #0]




	  	  sensor_time = Sensor_Read();
 80016e0:	f7ff fb2c 	bl	8000d3c <Sensor_Read>
 80016e4:	eef0 7a40 	vmov.f32	s15, s0
 80016e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ec:	ee17 2a90 	vmov	r2, s15
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <main+0xa10>)
 80016f2:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <main+0xa10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fea7 	bl	800044c <__aeabi_ui2d>
 80016fe:	a32e      	add	r3, pc, #184	; (adr r3, 80017b8 <main+0xa00>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff1c 	bl	8000540 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001718:	f7ff f83c 	bl	8000794 <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f91e 	bl	8000964 <__aeabi_d2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <main+0xa14>)
 800172c:	6013      	str	r3, [r2, #0]




	  	  htim4.Instance->CCR1 = 60;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <main+0xa0c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	223c      	movs	r2, #60	; 0x3c
 8001734:	635a      	str	r2, [r3, #52]	; 0x34
	  	  HAL_Delay(10);
 8001736:	200a      	movs	r0, #10
 8001738:	f000 ff24 	bl	8002584 <HAL_Delay>

	  	  sensor_time = Sensor_Read();
 800173c:	f7ff fafe 	bl	8000d3c <Sensor_Read>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 2a90 	vmov	r2, s15
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <main+0xa10>)
 800174e:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <main+0xa10>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe79 	bl	800044c <__aeabi_ui2d>
 800175a:	a317      	add	r3, pc, #92	; (adr r3, 80017b8 <main+0xa00>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe feee 	bl	8000540 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001774:	f7ff f80e 	bl	8000794 <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f8f0 	bl	8000964 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <main+0xa14>)
 8001788:	6013      	str	r3, [r2, #0]

	      if(distance < 8)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <main+0xa14>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d53c      	bpl.n	8001818 <main+0xa60>
	     	  	  {
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <main+0xa08>)
 80017a4:	f001 fa6a 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2140      	movs	r1, #64	; 0x40
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <main+0xa08>)
 80017ae:	f001 fa65 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2110      	movs	r1, #16
 80017b6:	e00d      	b.n	80017d4 <main+0xa1c>
 80017b8:	b020c49c 	.word	0xb020c49c
 80017bc:	3fa16872 	.word	0x3fa16872
 80017c0:	40020400 	.word	0x40020400
 80017c4:	200000b8 	.word	0x200000b8
 80017c8:	20000144 	.word	0x20000144
 80017cc:	20000148 	.word	0x20000148
 80017d0:	40020000 	.word	0x40020000
 80017d4:	48d2      	ldr	r0, [pc, #840]	; (8001b20 <main+0xd68>)
 80017d6:	f001 fa51 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2120      	movs	r1, #32
 80017de:	48d0      	ldr	r0, [pc, #832]	; (8001b20 <main+0xd68>)
 80017e0:	f001 fa4c 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_Delay(100);
 80017e4:	2064      	movs	r0, #100	; 0x64
 80017e6:	f000 fecd 	bl	8002584 <HAL_Delay>

			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2140      	movs	r1, #64	; 0x40
 80017ee:	48cd      	ldr	r0, [pc, #820]	; (8001b24 <main+0xd6c>)
 80017f0:	f001 fa44 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	48ca      	ldr	r0, [pc, #808]	; (8001b24 <main+0xd6c>)
 80017fa:	f001 fa3f 	bl	8002c7c <HAL_GPIO_WritePin>


	    	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2110      	movs	r1, #16
 8001802:	48c7      	ldr	r0, [pc, #796]	; (8001b20 <main+0xd68>)
 8001804:	f001 fa3a 	bl	8002c7c <HAL_GPIO_WritePin>
	    	  	    HAL_Delay(100);
 8001808:	2064      	movs	r0, #100	; 0x64
 800180a:	f000 febb 	bl	8002584 <HAL_Delay>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2110      	movs	r1, #16
 8001812:	48c3      	ldr	r0, [pc, #780]	; (8001b20 <main+0xd68>)
 8001814:	f001 fa32 	bl	8002c7c <HAL_GPIO_WritePin>




	     	  	  }
	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	48c1      	ldr	r0, [pc, #772]	; (8001b24 <main+0xd6c>)
 800181e:	f001 fa2d 	bl	8002c7c <HAL_GPIO_WritePin>
	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	48bf      	ldr	r0, [pc, #764]	; (8001b24 <main+0xd6c>)
 8001828:	f001 fa28 	bl	8002c7c <HAL_GPIO_WritePin>


		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2110      	movs	r1, #16
 8001830:	48bb      	ldr	r0, [pc, #748]	; (8001b20 <main+0xd68>)
 8001832:	f001 fa23 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	48b9      	ldr	r0, [pc, #740]	; (8001b20 <main+0xd68>)
 800183c:	f001 fa1e 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2120      	movs	r1, #32
 8001844:	48b6      	ldr	r0, [pc, #728]	; (8001b20 <main+0xd68>)
 8001846:	f001 fa19 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  HAL_Delay(50 );
 800184a:	2032      	movs	r0, #50	; 0x32
 800184c:	f000 fe9a 	bl	8002584 <HAL_Delay>
	  	  htim4.Instance->CCR1 = 50;
 8001850:	4bb5      	ldr	r3, [pc, #724]	; (8001b28 <main+0xd70>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2232      	movs	r2, #50	; 0x32
 8001856:	635a      	str	r2, [r3, #52]	; 0x34

	  	  sensor_time = Sensor_Read();
 8001858:	f7ff fa70 	bl	8000d3c <Sensor_Read>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001864:	ee17 2a90 	vmov	r2, s15
 8001868:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <main+0xd74>)
 800186a:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 800186c:	4baf      	ldr	r3, [pc, #700]	; (8001b2c <main+0xd74>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fdeb 	bl	800044c <__aeabi_ui2d>
 8001876:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b18 <main+0xd60>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fe60 	bl	8000540 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001890:	f7fe ff80 	bl	8000794 <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f862 	bl	8000964 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4aa3      	ldr	r2, [pc, #652]	; (8001b30 <main+0xd78>)
 80018a4:	6013      	str	r3, [r2, #0]

	      if(distance < 8)
 80018a6:	4ba2      	ldr	r3, [pc, #648]	; (8001b30 <main+0xd78>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d52d      	bpl.n	8001916 <main+0xb5e>
	     	  	  {
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	4898      	ldr	r0, [pc, #608]	; (8001b20 <main+0xd68>)
 80018c0:	f001 f9dc 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	4895      	ldr	r0, [pc, #596]	; (8001b20 <main+0xd68>)
 80018ca:	f001 f9d7 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2110      	movs	r1, #16
 80018d2:	4893      	ldr	r0, [pc, #588]	; (8001b20 <main+0xd68>)
 80018d4:	f001 f9d2 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	4890      	ldr	r0, [pc, #576]	; (8001b20 <main+0xd68>)
 80018de:	f001 f9cd 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	    HAL_Delay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f000 fe4e 	bl	8002584 <HAL_Delay>

			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	488d      	ldr	r0, [pc, #564]	; (8001b24 <main+0xd6c>)
 80018ee:	f001 f9c5 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	488b      	ldr	r0, [pc, #556]	; (8001b24 <main+0xd6c>)
 80018f8:	f001 f9c0 	bl	8002c7c <HAL_GPIO_WritePin>


	    	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4887      	ldr	r0, [pc, #540]	; (8001b20 <main+0xd68>)
 8001902:	f001 f9bb 	bl	8002c7c <HAL_GPIO_WritePin>
	    	  	    HAL_Delay(100);
 8001906:	2064      	movs	r0, #100	; 0x64
 8001908:	f000 fe3c 	bl	8002584 <HAL_Delay>
	     	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2110      	movs	r1, #16
 8001910:	4883      	ldr	r0, [pc, #524]	; (8001b20 <main+0xd68>)
 8001912:	f001 f9b3 	bl	8002c7c <HAL_GPIO_WritePin>



	     	  	  }

	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <main+0xd6c>)
 800191c:	f001 f9ae 	bl	8002c7c <HAL_GPIO_WritePin>
	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2140      	movs	r1, #64	; 0x40
 8001924:	487f      	ldr	r0, [pc, #508]	; (8001b24 <main+0xd6c>)
 8001926:	f001 f9a9 	bl	8002c7c <HAL_GPIO_WritePin>


		           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2110      	movs	r1, #16
 800192e:	487c      	ldr	r0, [pc, #496]	; (8001b20 <main+0xd68>)
 8001930:	f001 f9a4 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	4879      	ldr	r0, [pc, #484]	; (8001b20 <main+0xd68>)
 800193a:	f001 f99f 	bl	8002c7c <HAL_GPIO_WritePin>
	     	  	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2120      	movs	r1, #32
 8001942:	4877      	ldr	r0, [pc, #476]	; (8001b20 <main+0xd68>)
 8001944:	f001 f99a 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  HAL_Delay(50);
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f000 fe1b 	bl	8002584 <HAL_Delay>
	   	  htim4.Instance->CCR1 = 40;
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <main+0xd70>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2228      	movs	r2, #40	; 0x28
 8001954:	635a      	str	r2, [r3, #52]	; 0x34

	 	  sensor_time = Sensor_Read();
 8001956:	f7ff f9f1 	bl	8000d3c <Sensor_Read>
 800195a:	eef0 7a40 	vmov.f32	s15, s0
 800195e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001962:	ee17 2a90 	vmov	r2, s15
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <main+0xd74>)
 8001968:	601a      	str	r2, [r3, #0]
		  distance = sensor_time * .034/2;
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <main+0xd74>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd6c 	bl	800044c <__aeabi_ui2d>
 8001974:	a368      	add	r3, pc, #416	; (adr r3, 8001b18 <main+0xd60>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fde1 	bl	8000540 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198e:	f7fe ff01 	bl	8000794 <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7fe ffe3 	bl	8000964 <__aeabi_d2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <main+0xd78>)
 80019a2:	6013      	str	r3, [r2, #0]

		  if(distance < 8)
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <main+0xd78>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d52d      	bpl.n	8001a14 <main+0xc5c>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	4858      	ldr	r0, [pc, #352]	; (8001b20 <main+0xd68>)
 80019be:	f001 f95d 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	4856      	ldr	r0, [pc, #344]	; (8001b20 <main+0xd68>)
 80019c8:	f001 f958 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2110      	movs	r1, #16
 80019d0:	4853      	ldr	r0, [pc, #332]	; (8001b20 <main+0xd68>)
 80019d2:	f001 f953 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2120      	movs	r1, #32
 80019da:	4851      	ldr	r0, [pc, #324]	; (8001b20 <main+0xd68>)
 80019dc:	f001 f94e 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 80019e0:	2064      	movs	r0, #100	; 0x64
 80019e2:	f000 fdcf 	bl	8002584 <HAL_Delay>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	484e      	ldr	r0, [pc, #312]	; (8001b24 <main+0xd6c>)
 80019ec:	f001 f946 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	484b      	ldr	r0, [pc, #300]	; (8001b24 <main+0xd6c>)
 80019f6:	f001 f941 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2110      	movs	r1, #16
 80019fe:	4848      	ldr	r0, [pc, #288]	; (8001b20 <main+0xd68>)
 8001a00:	f001 f93c 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f000 fdbd 	bl	8002584 <HAL_Delay>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2110      	movs	r1, #16
 8001a0e:	4844      	ldr	r0, [pc, #272]	; (8001b20 <main+0xd68>)
 8001a10:	f001 f934 	bl	8002c7c <HAL_GPIO_WritePin>


		  	  }
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	4842      	ldr	r0, [pc, #264]	; (8001b24 <main+0xd6c>)
 8001a1a:	f001 f92f 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2140      	movs	r1, #64	; 0x40
 8001a22:	4840      	ldr	r0, [pc, #256]	; (8001b24 <main+0xd6c>)
 8001a24:	f001 f92a 	bl	8002c7c <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	483c      	ldr	r0, [pc, #240]	; (8001b20 <main+0xd68>)
 8001a2e:	f001 f925 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	483a      	ldr	r0, [pc, #232]	; (8001b20 <main+0xd68>)
 8001a38:	f001 f920 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2120      	movs	r1, #32
 8001a40:	4837      	ldr	r0, [pc, #220]	; (8001b20 <main+0xd68>)
 8001a42:	f001 f91b 	bl	8002c7c <HAL_GPIO_WritePin>


	  	  sensor_time = Sensor_Read();
 8001a46:	f7ff f979 	bl	8000d3c <Sensor_Read>
 8001a4a:	eef0 7a40 	vmov.f32	s15, s0
 8001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a52:	ee17 2a90 	vmov	r2, s15
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <main+0xd74>)
 8001a58:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <main+0xd74>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcf4 	bl	800044c <__aeabi_ui2d>
 8001a64:	a32c      	add	r3, pc, #176	; (adr r3, 8001b18 <main+0xd60>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fd69 	bl	8000540 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	f7fe fe89 	bl	8000794 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe ff6b 	bl	8000964 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <main+0xd78>)
 8001a92:	6013      	str	r3, [r2, #0]

	   	  htim4.Instance->CCR1 = 20;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <main+0xd70>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2214      	movs	r2, #20
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
	   	  HAL_Delay(50);
 8001a9c:	2032      	movs	r0, #50	; 0x32
 8001a9e:	f000 fd71 	bl	8002584 <HAL_Delay>

	   	 if(distance < 8)
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <main+0xd78>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d53e      	bpl.n	8001b34 <main+0xd7c>
	   		  	  {
	   		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	4819      	ldr	r0, [pc, #100]	; (8001b20 <main+0xd68>)
 8001abc:	f001 f8de 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	4816      	ldr	r0, [pc, #88]	; (8001b20 <main+0xd68>)
 8001ac6:	f001 f8d9 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2110      	movs	r1, #16
 8001ace:	4814      	ldr	r0, [pc, #80]	; (8001b20 <main+0xd68>)
 8001ad0:	f001 f8d4 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <main+0xd68>)
 8001ada:	f001 f8cf 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  	    HAL_Delay(100);
 8001ade:	2064      	movs	r0, #100	; 0x64
 8001ae0:	f000 fd50 	bl	8002584 <HAL_Delay>

			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2140      	movs	r1, #64	; 0x40
 8001ae8:	480e      	ldr	r0, [pc, #56]	; (8001b24 <main+0xd6c>)
 8001aea:	f001 f8c7 	bl	8002c7c <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <main+0xd6c>)
 8001af4:	f001 f8c2 	bl	8002c7c <HAL_GPIO_WritePin>


	   		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2110      	movs	r1, #16
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <main+0xd68>)
 8001afe:	f001 f8bd 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  	    HAL_Delay(100);
 8001b02:	2064      	movs	r0, #100	; 0x64
 8001b04:	f000 fd3e 	bl	8002584 <HAL_Delay>
	   		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <main+0xd68>)
 8001b0e:	f001 f8b5 	bl	8002c7c <HAL_GPIO_WritePin>
 8001b12:	e00f      	b.n	8001b34 <main+0xd7c>
 8001b14:	f3af 8000 	nop.w
 8001b18:	b020c49c 	.word	0xb020c49c
 8001b1c:	3fa16872 	.word	0x3fa16872
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020000 	.word	0x40020000
 8001b28:	200000b8 	.word	0x200000b8
 8001b2c:	20000144 	.word	0x20000144
 8001b30:	20000148 	.word	0x20000148




	   		  	  }
	  	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	484d      	ldr	r0, [pc, #308]	; (8001c70 <main+0xeb8>)
 8001b3a:	f001 f89f 	bl	8002c7c <HAL_GPIO_WritePin>
	  	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2140      	movs	r1, #64	; 0x40
 8001b42:	484b      	ldr	r0, [pc, #300]	; (8001c70 <main+0xeb8>)
 8001b44:	f001 f89a 	bl	8002c7c <HAL_GPIO_WritePin>


		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	4849      	ldr	r0, [pc, #292]	; (8001c74 <main+0xebc>)
 8001b4e:	f001 f895 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	4847      	ldr	r0, [pc, #284]	; (8001c74 <main+0xebc>)
 8001b58:	f001 f890 	bl	8002c7c <HAL_GPIO_WritePin>
	   		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2120      	movs	r1, #32
 8001b60:	4844      	ldr	r0, [pc, #272]	; (8001c74 <main+0xebc>)
 8001b62:	f001 f88b 	bl	8002c7c <HAL_GPIO_WritePin>

	  	  sensor_time = Sensor_Read();
 8001b66:	f7ff f8e9 	bl	8000d3c <Sensor_Read>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
 8001b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b72:	ee17 2a90 	vmov	r2, s15
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <main+0xec0>)
 8001b78:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * .034/2;
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <main+0xec0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc64 	bl	800044c <__aeabi_ui2d>
 8001b84:	a338      	add	r3, pc, #224	; (adr r3, 8001c68 <main+0xeb0>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fcd9 	bl	8000540 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9e:	f7fe fdf9 	bl	8000794 <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe fedb 	bl	8000964 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <main+0xec4>)
 8001bb2:	6013      	str	r3, [r2, #0]

	   	  htim4.Instance->CCR1 = 10;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <main+0xec8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	220a      	movs	r2, #10
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
	   	  HAL_Delay(10);
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f000 fce1 	bl	8002584 <HAL_Delay>

		  if(distance < 8)
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <main+0xec4>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d52d      	bpl.n	8001c32 <main+0xe7a>
		  	  {
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <main+0xebc>)
 8001bdc:	f001 f84e 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2140      	movs	r1, #64	; 0x40
 8001be4:	4823      	ldr	r0, [pc, #140]	; (8001c74 <main+0xebc>)
 8001be6:	f001 f849 	bl	8002c7c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2110      	movs	r1, #16
 8001bee:	4821      	ldr	r0, [pc, #132]	; (8001c74 <main+0xebc>)
 8001bf0:	f001 f844 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	481e      	ldr	r0, [pc, #120]	; (8001c74 <main+0xebc>)
 8001bfa:	f001 f83f 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	f000 fcc0 	bl	8002584 <HAL_Delay>

		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	4819      	ldr	r0, [pc, #100]	; (8001c70 <main+0xeb8>)
 8001c0a:	f001 f837 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <main+0xeb8>)
 8001c14:	f001 f832 	bl	8002c7c <HAL_GPIO_WritePin>


		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	4815      	ldr	r0, [pc, #84]	; (8001c74 <main+0xebc>)
 8001c1e:	f001 f82d 	bl	8002c7c <HAL_GPIO_WritePin>
		  	    HAL_Delay(100);
 8001c22:	2064      	movs	r0, #100	; 0x64
 8001c24:	f000 fcae 	bl	8002584 <HAL_Delay>
		  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <main+0xebc>)
 8001c2e:	f001 f825 	bl	8002c7c <HAL_GPIO_WritePin>


		  	  }
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	480e      	ldr	r0, [pc, #56]	; (8001c70 <main+0xeb8>)
 8001c38:	f001 f820 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2140      	movs	r1, #64	; 0x40
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <main+0xeb8>)
 8001c42:	f001 f81b 	bl	8002c7c <HAL_GPIO_WritePin>

		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <main+0xebc>)
 8001c4c:	f001 f816 	bl	8002c7c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	4807      	ldr	r0, [pc, #28]	; (8001c74 <main+0xebc>)
 8001c56:	f001 f811 	bl	8002c7c <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <main+0xebc>)
 8001c60:	f001 f80c 	bl	8002c7c <HAL_GPIO_WritePin>
	      sensor_time = Sensor_Read();
 8001c64:	f7ff b8bf 	b.w	8000de6 <main+0x2e>
 8001c68:	b020c49c 	.word	0xb020c49c
 8001c6c:	3fa16872 	.word	0x3fa16872
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	20000144 	.word	0x20000144
 8001c7c:	20000148 	.word	0x20000148
 8001c80:	200000b8 	.word	0x200000b8

08001c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b094      	sub	sp, #80	; 0x50
 8001c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	2230      	movs	r2, #48	; 0x30
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fbda 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <SystemClock_Config+0xcc>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <SystemClock_Config+0xcc>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <SystemClock_Config+0xcc>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <SystemClock_Config+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cea:	2302      	movs	r3, #2
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cf4:	2319      	movs	r3, #25
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 ffd0 	bl	8002cb0 <HAL_RCC_OscConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d16:	f000 fa07 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1a:	230f      	movs	r3, #15
 8001d1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2105      	movs	r1, #5
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fa31 	bl	80031a0 <HAL_RCC_ClockConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d44:	f000 f9f0 	bl	8002128 <Error_Handler>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3750      	adds	r7, #80	; 0x50
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000

08001d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <MX_TIM1_Init+0x9c>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da0:	4813      	ldr	r0, [pc, #76]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001da2:	f001 fbdd 	bl	8003560 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dac:	f000 f9bc 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001dbe:	f001 ff73 	bl	8003ca8 <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001dc8:	f000 f9ae 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_TIM1_Init+0x98>)
 8001dda:	f002 fb6f 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001de4:	f000 f9a0 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000028 	.word	0x20000028
 8001df4:	40010000 	.word	0x40010000

08001df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e32:	22a7      	movs	r2, #167	; 0xa7
 8001e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e50:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e52:	f001 fb85 	bl	8003560 <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e5c:	f000 f964 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e6e:	f001 ff1b 	bl	8003ca8 <HAL_TIM_ConfigClockSource>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e78:	f000 f956 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e7c:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e7e:	f001 fc27 	bl	80036d0 <HAL_TIM_PWM_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e88:	f000 f94e 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4811      	ldr	r0, [pc, #68]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001e9c:	f002 fb0e 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ea6:	f000 f93f 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eaa:	2360      	movs	r3, #96	; 0x60
 8001eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001ec2:	f001 fe2f 	bl	8003b24 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ecc:	f000 f92c 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM2_Init+0xe8>)
 8001ed2:	f000 f9b1 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8001ed6:	bf00      	nop
 8001ed8:	3738      	adds	r7, #56	; 0x38
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000070 	.word	0x20000070

08001ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	615a      	str	r2, [r3, #20]
 8001f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f16:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <MX_TIM4_Init+0xec>)
 8001f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f1c:	f240 3283 	movw	r2, #899	; 0x383
 8001f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f3c:	4823      	ldr	r0, [pc, #140]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f3e:	f001 fb0f 	bl	8003560 <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f48:	f000 f8ee 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f56:	4619      	mov	r1, r3
 8001f58:	481c      	ldr	r0, [pc, #112]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f5a:	f001 fea5 	bl	8003ca8 <HAL_TIM_ConfigClockSource>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f64:	f000 f8e0 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f68:	4818      	ldr	r0, [pc, #96]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f6a:	f001 fbb1 	bl	80036d0 <HAL_TIM_PWM_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f74:	f000 f8d8 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	4619      	mov	r1, r3
 8001f86:	4811      	ldr	r0, [pc, #68]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001f88:	f002 fa98 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f92:	f000 f8c9 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	2360      	movs	r3, #96	; 0x60
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001fae:	f001 fdb9 	bl	8003b24 <HAL_TIM_PWM_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001fb8:	f000 f8b6 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM4_Init+0xe8>)
 8001fbe:	f000 f93b 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8001fc2:	bf00      	nop
 8001fc4:	3738      	adds	r7, #56	; 0x38
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200000b8 	.word	0x200000b8
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART2_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 800200c:	f002 fae6 	bl	80045dc <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f000 f887 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000100 	.word	0x20000100
 8002024:	40004400 	.word	0x40004400

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <MX_GPIO_Init+0xf4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a35      	ldr	r2, [pc, #212]	; (800211c <MX_GPIO_Init+0xf4>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <MX_GPIO_Init+0xf4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_GPIO_Init+0xf4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <MX_GPIO_Init+0xf4>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <MX_GPIO_Init+0xf4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <MX_GPIO_Init+0xf4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <MX_GPIO_Init+0xf4>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <MX_GPIO_Init+0xf4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_GPIO_Init+0xf4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <MX_GPIO_Init+0xf4>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_GPIO_Init+0xf4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	21e0      	movs	r1, #224	; 0xe0
 80020b2:	481b      	ldr	r0, [pc, #108]	; (8002120 <MX_GPIO_Init+0xf8>)
 80020b4:	f000 fde2 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	21f0      	movs	r1, #240	; 0xf0
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <MX_GPIO_Init+0xfc>)
 80020be:	f000 fddd 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80020c2:	2310      	movs	r3, #16
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4812      	ldr	r0, [pc, #72]	; (8002120 <MX_GPIO_Init+0xf8>)
 80020d6:	f000 fc1d 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = Trigger_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80020da:	23e0      	movs	r3, #224	; 0xe0
 80020dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <MX_GPIO_Init+0xf8>)
 80020f2:	f000 fc0f 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020f6:	23f0      	movs	r3, #240	; 0xf0
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_GPIO_Init+0xfc>)
 800210e:	f000 fc01 	bl	8002914 <HAL_GPIO_Init>

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_MspInit+0x4c>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_MspInit+0x4c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_MspInit+0x4c>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x4c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <HAL_TIM_Base_MspInit+0xa8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021b2:	e036      	b.n	8002222 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d116      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	201c      	movs	r0, #28
 80021e0:	f000 facf 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e4:	201c      	movs	r0, #28
 80021e6:	f000 fae8 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 80021ea:	e01a      	b.n	8002222 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_TIM_Base_MspInit+0xb0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d115      	bne.n	8002222 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_TIM_Base_MspInit+0xac>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	201e      	movs	r0, #30
 8002218:	f000 fab3 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800221c:	201e      	movs	r0, #30
 800221e:	f000 facc 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40023800 	.word	0x40023800
 8002234:	40000800 	.word	0x40000800

08002238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d11e      	bne.n	8002298 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002286:	2301      	movs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4816      	ldr	r0, [pc, #88]	; (80022ec <HAL_TIM_MspPostInit+0xb4>)
 8002292:	f000 fb3f 	bl	8002914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002296:	e023      	b.n	80022e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIM_MspPostInit+0xb8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d11e      	bne.n	80022e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_TIM_MspPostInit+0xb0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022d0:	2302      	movs	r3, #2
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <HAL_TIM_MspPostInit+0xbc>)
 80022dc:	f000 fb1a 	bl	8002914 <HAL_GPIO_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40020c00 	.word	0x40020c00

080022f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_UART_MspInit+0x94>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d133      	bne.n	8002382 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_UART_MspInit+0x98>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_UART_MspInit+0x98>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_UART_MspInit+0x98>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x98>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_UART_MspInit+0x98>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_UART_MspInit+0x98>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002352:	230c      	movs	r3, #12
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002362:	2307      	movs	r3, #7
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_UART_MspInit+0x9c>)
 800236e:	f000 fad1 	bl	8002914 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2026      	movs	r0, #38	; 0x26
 8002378:	f000 fa03 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800237c:	2026      	movs	r0, #38	; 0x26
 800237e:	f000 fa1c 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40004400 	.word	0x40004400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f8ae 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <TIM2_IRQHandler+0x10>)
 80023f2:	f001 fa8f 	bl	8003914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000070 	.word	0x20000070

08002400 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM4_IRQHandler+0x10>)
 8002406:	f001 fa85 	bl	8003914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200000b8 	.word	0x200000b8

08002414 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <USART2_IRQHandler+0x10>)
 800241a:	f002 f92d 	bl	8004678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000100 	.word	0x20000100

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002468:	4c0b      	ldr	r4, [pc, #44]	; (8002498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002476:	f7ff ffd7 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f002 ffc3 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247e:	f7fe fc9b 	bl	8000db8 <main>
  bx  lr    
 8002482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002490:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 8002494:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002498:	20000150 	.word	0x20000150

0800249c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC_IRQHandler>
	...

080024a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <HAL_Init+0x40>)
 80024aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_Init+0x40>)
 80024b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_Init+0x40>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 f94f 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	200f      	movs	r0, #15
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fe2e 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f967 	bl	80027d6 <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f000 f92f 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000000 	.word	0x20000000
 800253c:	20000008 	.word	0x20000008
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008
 8002568:	2000014c 	.word	0x2000014c

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	2000014c 	.word	0x2000014c

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff ffee 	bl	800256c <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_Delay+0x44>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffde 	bl	800256c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff feb6 	bl	800256c <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d008      	beq.n	8002820 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e052      	b.n	80028c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0216 	bic.w	r2, r2, #22
 800282e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800283e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <HAL_DMA_Abort+0x62>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0208 	bic.w	r2, r2, #8
 800285e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002870:	e013      	b.n	800289a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002872:	f7ff fe7b 	bl	800256c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b05      	cmp	r3, #5
 800287e:	d90c      	bls.n	800289a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2203      	movs	r2, #3
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e015      	b.n	80028c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e4      	bne.n	8002872 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	223f      	movs	r2, #63	; 0x3f
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d004      	beq.n	80028ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e00c      	b.n	8002906 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2205      	movs	r2, #5
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e16b      	b.n	8002c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	f040 815a 	bne.w	8002c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d005      	beq.n	8002966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002962:	2b02      	cmp	r3, #2
 8002964:	d130      	bne.n	80029c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 0201 	and.w	r2, r3, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d017      	beq.n	8002a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d123      	bne.n	8002a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	69b9      	ldr	r1, [r7, #24]
 8002a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0203 	and.w	r2, r3, #3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80b4 	beq.w	8002c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b60      	ldr	r3, [pc, #384]	; (8002c20 <HAL_GPIO_Init+0x30c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a5f      	ldr	r2, [pc, #380]	; (8002c20 <HAL_GPIO_Init+0x30c>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <HAL_GPIO_Init+0x30c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_GPIO_Init+0x310>)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	3302      	adds	r3, #2
 8002abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a52      	ldr	r2, [pc, #328]	; (8002c28 <HAL_GPIO_Init+0x314>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02b      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_GPIO_Init+0x318>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d025      	beq.n	8002b36 <HAL_GPIO_Init+0x222>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a50      	ldr	r2, [pc, #320]	; (8002c30 <HAL_GPIO_Init+0x31c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <HAL_GPIO_Init+0x21e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4f      	ldr	r2, [pc, #316]	; (8002c34 <HAL_GPIO_Init+0x320>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d019      	beq.n	8002b2e <HAL_GPIO_Init+0x21a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4e      	ldr	r2, [pc, #312]	; (8002c38 <HAL_GPIO_Init+0x324>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0x216>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <HAL_GPIO_Init+0x328>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00d      	beq.n	8002b26 <HAL_GPIO_Init+0x212>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <HAL_GPIO_Init+0x20e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_GPIO_Init+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_GPIO_Init+0x20a>
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	e00e      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	e00c      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e00a      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b26:	2305      	movs	r3, #5
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x228>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f002 0203 	and.w	r2, r2, #3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_GPIO_Init+0x310>)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7e:	4a32      	ldr	r2, [pc, #200]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_GPIO_Init+0x334>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	f67f ae90 	bls.w	8002930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40021400 	.word	0x40021400
 8002c40:	40021800 	.word	0x40021800
 8002c44:	40021c00 	.word	0x40021c00
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e001      	b.n	8002c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e267      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d075      	beq.n	8002dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d112      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05b      	beq.n	8002db8 <HAL_RCC_OscConfig+0x108>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d157      	bne.n	8002db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e242      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x74>
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6f      	ldr	r2, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d48:	4b69      	ldr	r3, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7ff fc00 	bl	800256c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff fbfc 	bl	800256c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e207      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xc0>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7ff fbec 	bl	800256c <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fbe8 	bl	800256c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1f3      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0xe8>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1c7      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4937      	ldr	r1, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_RCC_OscConfig+0x244>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7ff fba1 	bl	800256c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7ff fb9d 	bl	800256c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1a8      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x244>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff fb80 	bl	800256c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e70:	f7ff fb7c 	bl	800256c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e187      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x248>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fb60 	bl	800256c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fb5c 	bl	800256c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e167      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x200>
 8002ece:	e01b      	b.n	8002f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x248>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7ff fb49 	bl	800256c <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ede:	f7ff fb45 	bl	800256c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e150      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8097 	beq.w	8003044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a7c      	ldr	r2, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b77      	ldr	r3, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x474>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b74      	ldr	r3, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a73      	ldr	r2, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x474>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff fb05 	bl	800256c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7ff fb01 	bl	800256c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e10c      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x474>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2ea>
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a63      	ldr	r2, [pc, #396]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x324>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x30c>
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a5e      	ldr	r2, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x324>
 8002fbc:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a54      	ldr	r2, [pc, #336]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7ff fac6 	bl	800256c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7ff fac2 	bl	800256c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0cb      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7ff fab0 	bl	800256c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7ff faac 	bl	800256c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0b5      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a38      	ldr	r2, [pc, #224]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80a1 	beq.w	8003190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b34      	ldr	r3, [pc, #208]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d05c      	beq.n	8003114 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d141      	bne.n	80030e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7ff fa80 	bl	800256c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7ff fa7c 	bl	800256c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e087      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	491b      	ldr	r1, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7ff fa55 	bl	800256c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7ff fa51 	bl	800256c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e05c      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x416>
 80030e4:	e054      	b.n	8003190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff fa3e 	bl	800256c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7ff fa3a 	bl	800256c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e045      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_OscConfig+0x470>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x444>
 8003112:	e03d      	b.n	8003190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e038      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000
 8003128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x4ec>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d028      	beq.n	800318c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d121      	bne.n	800318c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d11a      	bne.n	800318c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003164:	4293      	cmp	r3, r2
 8003166:	d111      	bne.n	800318c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	3b01      	subs	r3, #1
 8003176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0cc      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b68      	ldr	r3, [pc, #416]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d90c      	bls.n	80031dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b8      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f4:	4b59      	ldr	r3, [pc, #356]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a58      	ldr	r2, [pc, #352]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800320c:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	494d      	ldr	r1, [pc, #308]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d044      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d119      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d003      	beq.n	800325e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	2b03      	cmp	r3, #3
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	4b3f      	ldr	r3, [pc, #252]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326e:	4b3b      	ldr	r3, [pc, #236]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e067      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 0203 	bic.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4934      	ldr	r1, [pc, #208]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003290:	f7ff f96c 	bl	800256c <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7ff f968 	bl	800256c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e04f      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 020c 	and.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1eb      	bne.n	8003298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d20c      	bcs.n	80032e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e032      	b.n	800334e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4916      	ldr	r1, [pc, #88]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	490e      	ldr	r1, [pc, #56]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003326:	f000 f821 	bl	800336c <HAL_RCC_GetSysClockFreq>
 800332a:	4602      	mov	r2, r0
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	490a      	ldr	r1, [pc, #40]	; (8003360 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	5ccb      	ldrb	r3, [r1, r3]
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f8cc 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023c00 	.word	0x40023c00
 800335c:	40023800 	.word	0x40023800
 8003360:	08005474 	.word	0x08005474
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004

0800336c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b090      	sub	sp, #64	; 0x40
 8003372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337c:	2300      	movs	r3, #0
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d00d      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x40>
 8003390:	2b08      	cmp	r3, #8
 8003392:	f200 80a1 	bhi.w	80034d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x34>
 800339a:	2b04      	cmp	r3, #4
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800339e:	e09b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033a4:	e09b      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a6:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033aa:	e098      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	2200      	movs	r2, #0
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	627a      	str	r2, [r7, #36]	; 0x24
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033d4:	2100      	movs	r1, #0
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d8:	fb03 f201 	mul.w	r2, r3, r1
 80033dc:	2300      	movs	r3, #0
 80033de:	fb00 f303 	mul.w	r3, r0, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	4a43      	ldr	r2, [pc, #268]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e6:	fba0 1202 	umull	r1, r2, r0, r2
 80033ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ec:	460a      	mov	r2, r1
 80033ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80033f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f2:	4413      	add	r3, r2
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	2200      	movs	r2, #0
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	61fa      	str	r2, [r7, #28]
 80033fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003406:	f7fd fafd 	bl	8000a04 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4613      	mov	r3, r2
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003412:	e053      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	2200      	movs	r2, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	617a      	str	r2, [r7, #20]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003426:	f04f 0b00 	mov.w	fp, #0
 800342a:	4652      	mov	r2, sl
 800342c:	465b      	mov	r3, fp
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	ebb2 080a 	subs.w	r8, r2, sl
 8003446:	eb63 090b 	sbc.w	r9, r3, fp
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003456:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800345a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800345e:	ebb2 0408 	subs.w	r4, r2, r8
 8003462:	eb63 0509 	sbc.w	r5, r3, r9
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	00eb      	lsls	r3, r5, #3
 8003470:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003474:	00e2      	lsls	r2, r4, #3
 8003476:	4614      	mov	r4, r2
 8003478:	461d      	mov	r5, r3
 800347a:	eb14 030a 	adds.w	r3, r4, sl
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	eb45 030b 	adc.w	r3, r5, fp
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003492:	4629      	mov	r1, r5
 8003494:	028b      	lsls	r3, r1, #10
 8003496:	4621      	mov	r1, r4
 8003498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800349c:	4621      	mov	r1, r4
 800349e:	028a      	lsls	r2, r1, #10
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	2200      	movs	r2, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	60fa      	str	r2, [r7, #12]
 80034ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034b0:	f7fd faa8 	bl	8000a04 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetSysClockFreq+0x180>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034d6:	e002      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3740      	adds	r7, #64	; 0x40
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	017d7840 	.word	0x017d7840

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_RCC_GetHCLKFreq+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003514:	f7ff fff0 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	08005484 	.word	0x08005484

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800353c:	f7ff ffdc 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0b5b      	lsrs	r3, r3, #13
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK2Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	08005484 	.word	0x08005484

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e041      	b.n	80035f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe fdfc 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fc7c 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e046      	b.n	80036a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_TIM_Base_Start+0xb4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d022      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003632:	d01d      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_TIM_Base_Start+0xb8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d018      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_TIM_Base_Start+0xbc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_TIM_Base_Start+0xc0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_TIM_Base_Start+0xc4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_TIM_Base_Start+0xc8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_Base_Start+0x70>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_TIM_Base_Start+0xcc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d010      	beq.n	80036a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e007      	b.n	80036a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40010400 	.word	0x40010400
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40001800 	.word	0x40001800

080036d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f839 	bl	800376e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fbc4 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x24>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e022      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x3e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e015      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x58>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07c      	b.n	80038f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0x82>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	e013      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0x92>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003814:	e00b      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003824:	e003      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe1a 	bl	8004470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_TIM_PWM_Start+0x174>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_PWM_Start+0xcc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <HAL_TIM_PWM_Start+0x178>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_TIM_PWM_Start+0xd0>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_TIM_PWM_Start+0xd2>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_TIM_PWM_Start+0x174>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d01d      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_TIM_PWM_Start+0x17c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_TIM_PWM_Start+0x180>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_TIM_PWM_Start+0x184>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_TIM_PWM_Start+0x178>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_TIM_PWM_Start+0x188>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_TIM_PWM_Start+0x18c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d010      	beq.n	80038ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	e007      	b.n	80038ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40014000 	.word	0x40014000
 8003910:	40001800 	.word	0x40001800

08003914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0202 	mvn.w	r2, #2
 8003940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa81 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa73 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa84 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b04      	cmp	r3, #4
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0204 	mvn.w	r2, #4
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa57 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa49 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa5a 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0208 	mvn.w	r2, #8
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2204      	movs	r2, #4
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa2d 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa1f 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fa30 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0210 	mvn.w	r2, #16
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa03 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9f5 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fa06 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0201 	mvn.w	r2, #1
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9cf 	bl	8003e36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fd82 	bl	80045c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9cb 	bl	8003e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0220 	mvn.w	r2, #32
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fd4c 	bl	80045b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e0ae      	b.n	8003ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	f200 809f 	bhi.w	8003c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b8d 	.word	0x08003b8d
 8003b5c:	08003c91 	.word	0x08003c91
 8003b60:	08003c91 	.word	0x08003c91
 8003b64:	08003c91 	.word	0x08003c91
 8003b68:	08003bcd 	.word	0x08003bcd
 8003b6c:	08003c91 	.word	0x08003c91
 8003b70:	08003c91 	.word	0x08003c91
 8003b74:	08003c91 	.word	0x08003c91
 8003b78:	08003c0f 	.word	0x08003c0f
 8003b7c:	08003c91 	.word	0x08003c91
 8003b80:	08003c91 	.word	0x08003c91
 8003b84:	08003c91 	.word	0x08003c91
 8003b88:	08003c4f 	.word	0x08003c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fa22 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0208 	orr.w	r2, r2, #8
 8003ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	619a      	str	r2, [r3, #24]
      break;
 8003bca:	e064      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fa72 	bl	80040bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6999      	ldr	r1, [r3, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	619a      	str	r2, [r3, #24]
      break;
 8003c0c:	e043      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fac7 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0208 	orr.w	r2, r2, #8
 8003c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0204 	bic.w	r2, r2, #4
 8003c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	61da      	str	r2, [r3, #28]
      break;
 8003c4c:	e023      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb1b 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69d9      	ldr	r1, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	021a      	lsls	r2, r3, #8
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	61da      	str	r2, [r3, #28]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
      break;
 8003c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0b4      	b.n	8003e2e <HAL_TIM_ConfigClockSource+0x186>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfc:	d03e      	beq.n	8003d7c <HAL_TIM_ConfigClockSource+0xd4>
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	f200 8087 	bhi.w	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0a:	f000 8086 	beq.w	8003e1a <HAL_TIM_ConfigClockSource+0x172>
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d87f      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d01a      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xa6>
 8003d18:	2b70      	cmp	r3, #112	; 0x70
 8003d1a:	d87b      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b60      	cmp	r3, #96	; 0x60
 8003d1e:	d050      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d20:	2b60      	cmp	r3, #96	; 0x60
 8003d22:	d877      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b50      	cmp	r3, #80	; 0x50
 8003d26:	d03c      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d28:	2b50      	cmp	r3, #80	; 0x50
 8003d2a:	d873      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d058      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d86f      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b30      	cmp	r3, #48	; 0x30
 8003d36:	d064      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b30      	cmp	r3, #48	; 0x30
 8003d3a:	d86b      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d060      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d867      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05c      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x15a>
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d05a      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x15a>
 8003d4c:	e062      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f000 fb67 	bl	8004430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
      break;
 8003d7a:	e04f      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f000 fb50 	bl	8004430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9e:	609a      	str	r2, [r3, #8]
      break;
 8003da0:	e03c      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fac4 	bl	800433c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2150      	movs	r1, #80	; 0x50
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fb1d 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e02c      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 fae3 	bl	800439a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2160      	movs	r1, #96	; 0x60
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fb0d 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003de0:	e01c      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 faa4 	bl	800433c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2140      	movs	r1, #64	; 0x40
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fafd 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e00:	e00c      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f000 faf4 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e12:	e003      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e000      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00f      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3a      	ldr	r2, [pc, #232]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d027      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d023      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d017      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <TIM_Base_SetConfig+0x128>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <TIM_Base_SetConfig+0x12c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_Base_SetConfig+0x130>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <TIM_Base_SetConfig+0x134>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_Base_SetConfig+0x138>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <TIM_Base_SetConfig+0x13c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800
 8003fd0:	40001800 	.word	0x40001800
 8003fd4:	40001c00 	.word	0x40001c00
 8003fd8:	40002000 	.word	0x40002000

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <TIM_OC1_SetConfig+0xd8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC1_SetConfig+0x64>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <TIM_OC1_SetConfig+0xdc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10c      	bne.n	800405a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0308 	bic.w	r3, r3, #8
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <TIM_OC1_SetConfig+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0x8e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <TIM_OC1_SetConfig+0xdc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400

080040bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0210 	bic.w	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0x68>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <TIM_OC2_SetConfig+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10d      	bne.n	8004140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x94>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d113      	bne.n	8004178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a21      	ldr	r2, [pc, #132]	; (8004288 <TIM_OC3_SetConfig+0xe0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <TIM_OC3_SetConfig+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10d      	bne.n	800422a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a16      	ldr	r2, [pc, #88]	; (8004288 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x92>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <TIM_OC4_SetConfig+0xa4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC4_SetConfig+0x68>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a11      	ldr	r2, [pc, #68]	; (8004338 <TIM_OC4_SetConfig+0xa8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40010400 	.word	0x40010400

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f023 0210 	bic.w	r2, r3, #16
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	f043 0307 	orr.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	431a      	orrs	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2201      	movs	r2, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e05a      	b.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a21      	ldr	r2, [pc, #132]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d01d      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10c      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03f      	b.n	800466e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fe78 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fc7b 	bl	8004f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0ba      	sub	sp, #232	; 0xe8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_UART_IRQHandler+0x66>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb65 	bl	8004da6 <UART_Receive_IT>
      return;
 80046dc:	e256      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80de 	beq.w	80048a4 <HAL_UART_IRQHandler+0x22c>
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80d1 	beq.w	80048a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_UART_IRQHandler+0xae>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_UART_IRQHandler+0xd2>
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_UART_IRQHandler+0xf6>
 8004756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_UART_IRQHandler+0x126>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d105      	bne.n	8004792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0208 	orr.w	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 81ed 	beq.w	8004b82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_UART_IRQHandler+0x14e>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 faf0 	bl	8004da6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_UART_IRQHandler+0x17a>
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04f      	beq.n	8004892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9f8 	bl	8004be8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d141      	bne.n	800488a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800481c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800483e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800484a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1d9      	bne.n	8004806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4a7d      	ldr	r2, [pc, #500]	; (8004a54 <HAL_UART_IRQHandler+0x3dc>)
 8004860:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe f831 	bl	80028ce <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00e      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f99a 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e00a      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f996 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e006      	b.n	80048a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f992 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800489e:	e170      	b.n	8004b82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	bf00      	nop
    return;
 80048a2:	e16e      	b.n	8004b82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 814a 	bne.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8143 	beq.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 813c 	beq.w	8004b42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	f040 80b4 	bne.w	8004a58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8140 	beq.w	8004b86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800490a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490e:	429a      	cmp	r2, r3
 8004910:	f080 8139 	bcs.w	8004b86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	f000 8088 	beq.w	8004a3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800496e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1d9      	bne.n	800492a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800499a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800499e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e1      	bne.n	8004976 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0a:	f023 0310 	bic.w	r3, r3, #16
 8004a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e3      	bne.n	80049f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd feda 	bl	80027ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8c0 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a50:	e099      	b.n	8004b86 <HAL_UART_IRQHandler+0x50e>
 8004a52:	bf00      	nop
 8004a54:	08004caf 	.word	0x08004caf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 808b 	beq.w	8004b8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8086 	beq.w	8004b8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e3      	bne.n	8004a7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3314      	adds	r3, #20
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ada:	633a      	str	r2, [r7, #48]	; 0x30
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e3      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e3      	bne.n	8004afc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f848 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b40:	e023      	b.n	8004b8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_UART_IRQHandler+0x4ea>
 8004b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8bb 	bl	8004cd6 <UART_Transmit_IT>
    return;
 8004b60:	e014      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <HAL_UART_IRQHandler+0x514>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8fb 	bl	8004d76 <UART_EndTransmit_IT>
    return;
 8004b80:	e004      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
    return;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
      return;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_UART_IRQHandler+0x514>
      return;
 8004b8a:	bf00      	nop
  }
}
 8004b8c:	37e8      	adds	r7, #232	; 0xe8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b095      	sub	sp, #84	; 0x54
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c10:	643a      	str	r2, [r7, #64]	; 0x40
 8004c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3314      	adds	r3, #20
 8004c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d119      	bne.n	8004c94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	647b      	str	r3, [r7, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c80:	61ba      	str	r2, [r7, #24]
 8004c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ca2:	bf00      	nop
 8004ca4:	3754      	adds	r7, #84	; 0x54
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ff77 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b21      	cmp	r3, #33	; 0x21
 8004ce8:	d13e      	bne.n	8004d68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	d114      	bne.n	8004d1e <UART_Transmit_IT+0x48>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d110      	bne.n	8004d1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	621a      	str	r2, [r3, #32]
 8004d1c:	e008      	b.n	8004d30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6211      	str	r1, [r2, #32]
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10f      	bne.n	8004d64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fefc 	bl	8004b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08c      	sub	sp, #48	; 0x30
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b22      	cmp	r3, #34	; 0x22
 8004db8:	f040 80ab 	bne.w	8004f12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d117      	bne.n	8004df6 <UART_Receive_IT+0x50>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d113      	bne.n	8004df6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
 8004df4:	e026      	b.n	8004e44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e08:	d007      	beq.n	8004e1a <UART_Receive_IT+0x74>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <UART_Receive_IT+0x82>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	e008      	b.n	8004e3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4619      	mov	r1, r3
 8004e52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d15a      	bne.n	8004f0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0220 	bic.w	r2, r2, #32
 8004e66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d135      	bne.n	8004f04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f023 0310 	bic.w	r3, r3, #16
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	623a      	str	r2, [r7, #32]
 8004ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d10a      	bne.n	8004ef6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fe67 	bl	8004bd0 <HAL_UARTEx_RxEventCallback>
 8004f02:	e002      	b.n	8004f0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fe4f 	bl	8004ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e002      	b.n	8004f14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f12:	2302      	movs	r3, #2
  }
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3730      	adds	r7, #48	; 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f20:	b0c0      	sub	sp, #256	; 0x100
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	ea40 0301 	orr.w	r3, r0, r1
 8004f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f74:	f021 010c 	bic.w	r1, r1, #12
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f82:	430b      	orrs	r3, r1
 8004f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	6999      	ldr	r1, [r3, #24]
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	ea40 0301 	orr.w	r3, r0, r1
 8004fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b8f      	ldr	r3, [pc, #572]	; (80051e8 <UART_SetConfig+0x2cc>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d005      	beq.n	8004fbc <UART_SetConfig+0xa0>
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8d      	ldr	r3, [pc, #564]	; (80051ec <UART_SetConfig+0x2d0>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d104      	bne.n	8004fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fe fabc 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fc4:	e003      	b.n	8004fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc6:	f7fe faa3 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8004fca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd8:	f040 810c 	bne.w	80051f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	1891      	adds	r1, r2, r2
 8004ff4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ff6:	415b      	adcs	r3, r3
 8004ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ffe:	4621      	mov	r1, r4
 8005000:	eb12 0801 	adds.w	r8, r2, r1
 8005004:	4629      	mov	r1, r5
 8005006:	eb43 0901 	adc.w	r9, r3, r1
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800501a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501e:	4690      	mov	r8, r2
 8005020:	4699      	mov	r9, r3
 8005022:	4623      	mov	r3, r4
 8005024:	eb18 0303 	adds.w	r3, r8, r3
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800502c:	462b      	mov	r3, r5
 800502e:	eb49 0303 	adc.w	r3, r9, r3
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800504a:	460b      	mov	r3, r1
 800504c:	18db      	adds	r3, r3, r3
 800504e:	653b      	str	r3, [r7, #80]	; 0x50
 8005050:	4613      	mov	r3, r2
 8005052:	eb42 0303 	adc.w	r3, r2, r3
 8005056:	657b      	str	r3, [r7, #84]	; 0x54
 8005058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800505c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005060:	f7fb fcd0 	bl	8000a04 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2302 	umull	r2, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	011c      	lsls	r4, r3, #4
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800507c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	64b9      	str	r1, [r7, #72]	; 0x48
 800508c:	415b      	adcs	r3, r3
 800508e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005094:	4641      	mov	r1, r8
 8005096:	eb12 0a01 	adds.w	sl, r2, r1
 800509a:	4649      	mov	r1, r9
 800509c:	eb43 0b01 	adc.w	fp, r3, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b4:	4692      	mov	sl, r2
 80050b6:	469b      	mov	fp, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	eb1a 0303 	adds.w	r3, sl, r3
 80050be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c2:	464b      	mov	r3, r9
 80050c4:	eb4b 0303 	adc.w	r3, fp, r3
 80050c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050e0:	460b      	mov	r3, r1
 80050e2:	18db      	adds	r3, r3, r3
 80050e4:	643b      	str	r3, [r7, #64]	; 0x40
 80050e6:	4613      	mov	r3, r2
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
 80050ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050f6:	f7fb fc85 	bl	8000a04 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	4b3b      	ldr	r3, [pc, #236]	; (80051f0 <UART_SetConfig+0x2d4>)
 8005102:	fba3 2301 	umull	r2, r3, r3, r1
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2264      	movs	r2, #100	; 0x64
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <UART_SetConfig+0x2d4>)
 8005118:	fba3 2302 	umull	r2, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005124:	441c      	add	r4, r3
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005130:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005140:	415b      	adcs	r3, r3
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6339      	str	r1, [r7, #48]	; 0x30
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051b2:	f7fb fc27 	bl	8000a04 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <UART_SetConfig+0x2d4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <UART_SetConfig+0x2d4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4422      	add	r2, r4
 80051e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e4:	e105      	b.n	80053f2 <UART_SetConfig+0x4d6>
 80051e6:	bf00      	nop
 80051e8:	40011000 	.word	0x40011000
 80051ec:	40011400 	.word	0x40011400
 80051f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	1891      	adds	r1, r2, r2
 800520c:	6239      	str	r1, [r7, #32]
 800520e:	415b      	adcs	r3, r3
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
 8005212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005216:	4641      	mov	r1, r8
 8005218:	1854      	adds	r4, r2, r1
 800521a:	4649      	mov	r1, r9
 800521c:	eb43 0501 	adc.w	r5, r3, r1
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800523c:	464b      	mov	r3, r9
 800523e:	eb45 0303 	adc.w	r3, r5, r3
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005262:	4629      	mov	r1, r5
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526c:	4621      	mov	r1, r4
 800526e:	008a      	lsls	r2, r1, #2
 8005270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005274:	f7fb fbc6 	bl	8000a04 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b60      	ldr	r3, [pc, #384]	; (8005400 <UART_SetConfig+0x4e4>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011c      	lsls	r4, r3, #4
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005290:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	61b9      	str	r1, [r7, #24]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a8:	4641      	mov	r1, r8
 80052aa:	1851      	adds	r1, r2, r1
 80052ac:	6139      	str	r1, [r7, #16]
 80052ae:	4649      	mov	r1, r9
 80052b0:	414b      	adcs	r3, r1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c0:	4659      	mov	r1, fp
 80052c2:	00cb      	lsls	r3, r1, #3
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ca:	4651      	mov	r1, sl
 80052cc:	00ca      	lsls	r2, r1, #3
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	4642      	mov	r2, r8
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052dc:	464b      	mov	r3, r9
 80052de:	460a      	mov	r2, r1
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005300:	4649      	mov	r1, r9
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	4641      	mov	r1, r8
 8005306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530a:	4641      	mov	r1, r8
 800530c:	008a      	lsls	r2, r1, #2
 800530e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005312:	f7fb fb77 	bl	8000a04 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <UART_SetConfig+0x4e4>)
 800531c:	fba3 1302 	umull	r1, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	2164      	movs	r1, #100	; 0x64
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	3332      	adds	r3, #50	; 0x32
 800532e:	4a34      	ldr	r2, [pc, #208]	; (8005400 <UART_SetConfig+0x4e4>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533a:	441c      	add	r4, r3
 800533c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005340:	2200      	movs	r2, #0
 8005342:	673b      	str	r3, [r7, #112]	; 0x70
 8005344:	677a      	str	r2, [r7, #116]	; 0x74
 8005346:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800534a:	4642      	mov	r2, r8
 800534c:	464b      	mov	r3, r9
 800534e:	1891      	adds	r1, r2, r2
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	415b      	adcs	r3, r3
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800535a:	4641      	mov	r1, r8
 800535c:	1851      	adds	r1, r2, r1
 800535e:	6039      	str	r1, [r7, #0]
 8005360:	4649      	mov	r1, r9
 8005362:	414b      	adcs	r3, r1
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005372:	4659      	mov	r1, fp
 8005374:	00cb      	lsls	r3, r1, #3
 8005376:	4651      	mov	r1, sl
 8005378:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537c:	4651      	mov	r1, sl
 800537e:	00ca      	lsls	r2, r1, #3
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	4603      	mov	r3, r0
 8005386:	4642      	mov	r2, r8
 8005388:	189b      	adds	r3, r3, r2
 800538a:	66bb      	str	r3, [r7, #104]	; 0x68
 800538c:	464b      	mov	r3, r9
 800538e:	460a      	mov	r2, r1
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	663b      	str	r3, [r7, #96]	; 0x60
 80053a0:	667a      	str	r2, [r7, #100]	; 0x64
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053ae:	4649      	mov	r1, r9
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	4641      	mov	r1, r8
 80053b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b8:	4641      	mov	r1, r8
 80053ba:	008a      	lsls	r2, r1, #2
 80053bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053c0:	f7fb fb20 	bl	8000a04 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <UART_SetConfig+0x4e4>)
 80053ca:	fba3 1302 	umull	r1, r3, r3, r2
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2164      	movs	r1, #100	; 0x64
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	3332      	adds	r3, #50	; 0x32
 80053dc:	4a08      	ldr	r2, [pc, #32]	; (8005400 <UART_SetConfig+0x4e4>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	f003 020f 	and.w	r2, r3, #15
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4422      	add	r2, r4
 80053f0:	609a      	str	r2, [r3, #8]
}
 80053f2:	bf00      	nop
 80053f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	51eb851f 	.word	0x51eb851f

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	; (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	; (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	; (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	; (8005448 <__libc_init_array+0x44>)
 8005418:	f000 f820 	bl	800545c <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	08005494 	.word	0x08005494
 8005440:	08005494 	.word	0x08005494
 8005444:	08005494 	.word	0x08005494
 8005448:	08005498 	.word	0x08005498

0800544c <memset>:
 800544c:	4402      	add	r2, r0
 800544e:	4603      	mov	r3, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	f803 1b01 	strb.w	r1, [r3], #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <_init>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr

08005468 <_fini>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	bf00      	nop
 800546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546e:	bc08      	pop	{r3}
 8005470:	469e      	mov	lr, r3
 8005472:	4770      	bx	lr
